
========= 
/* eslint-disable react-hooks/exhaustive-deps */
import React, { useState } from 'react';
import cls from 'classnames';
import { useHistory } from 'react-router-dom';
import { Tooltip, Button, Message, Modal, Popover } from '@arco-design/web-react';


import { DeepComponent, FuckComponent } from './style';

/* import { ReactComponent as DeepComponent } from './style/deep.svg'; */

import css from './index.module.less';

import PurchaseBaseCard from './component/PurchaseBaseCard';
import PurchaseTryCard from './component/PurchaseTryCard';
import PurchaseProfessionalCard from './component/PurchaseProfessionalCard';
import { ProfessionalMiniPurchase } from './constant';

import RepurchaseBaseCard from './component/RepurchaseBaseCard';
import RepurchaseProfessionalCard from './component/RepurchaseProfessionalCard';
import PurchaseEnterpriseCard from './component/PurchaseEnterpriseCard';
import PurchasePreTitle from './component/PurchasePreTitle';
import PackageBalanceCard from './component/PackageBalanceCard';
import PurchasePreLine from './component/PurchasePreLine';
import { useUserInfo } from '@/components/UserInfo';
import services from '@/services';

export enum MealType {
  none = -1,
  try = 0,
  base = 1,
  professional = 2,
  enterprise = 3,
}
const CreatePreorder = services('CreatePreorder');

interface IProps {
  mainInit?: boolean;
  isAgree?: boolean;
}

export default function (props: IProps | {}) {
  const { mainInit = false, isAgree = false } = (props as IProps);
  const [isMealWrap, setIeMealWrap] = useState<boolean>(true);
  const [buyVisible, setBuyVisible] = useState<boolean>(false);
  /** 专业版初始化最低套餐 */
  const [professionalInfo, setProfessionalInfo] = useState<any>(ProfessionalMiniPurchase);
  const history = useHistory();
  const [loadingVideoSmall, setLoadingVideoSmall] = useState<boolean>(false);
  const [loadingStorageSmall, setLoadingStorageSmall] = useState<boolean>(false);
  const { BillingInfo, UID } = useUserInfo();
  /** 判断专业版是否复购 */
  const isProfessionalRepurchase = Boolean(BillingInfo?.CommodityRunning?.ProfessionalCommodity);
  /** 判断基础版是否复购 */
  const isBaseRepurchase = Boolean(BillingInfo?.CommodityRunning?.BaseCommodity);
  const { AdditionCommodity } = BillingInfo.CommodityPurchase;
  const additionVideoSmall = AdditionCommodity.filter((v) => v?.CommodityID === 'Addition_220813_VideoSmall')?.[0];
  const additionStorageSmall = AdditionCommodity.filter((v) => v?.CommodityID === 'Addition_220813_StorageSmall')?.[0];

  /** 专业版复购最小参数计算 */
  const professionalCalc = () => {
    const currentProfessional = BillingInfo?.CommodityPurchase?.ProfessionalCommodity.filter((v) => {
      return v?.AllowPurchase;
    });
    if (currentProfessional?.length > 0) {
      setProfessionalInfo(currentProfessional?.[0]);
    } else {
      setProfessionalInfo(BillingInfo?.CommodityPurchase?.ProfessionalCommodity?.[0]);
    }
  };

  /** 如果再saas里面，如果是子账号，不展示下单界面 */

  React.useEffect(() => {
    if (UID !== 0 && !mainInit) {
      Message.warning('子账号无法扩容');
      history.push('/material-library');
    }
    professionalCalc();
  }, [UID]);

  return (
    <main
      className={cls(css.main, 'smallScrollbar', {
        [css.mainNoInit]: !mainInit
      })}>

      {mainInit ?
      <>
          <div
          className={cls(css.wrapContent, 'smallScrollbar', {
            [css.wrapContentInit]: mainInit
          })}>

            <PurchasePreTitle />
            {BillingInfo?.CommodityPurchase?.TrialCommodity?.[0]?.AllowPurchase ?
          <>
                <PurchaseTryCard isInit={false} info={BillingInfo?.CommodityPurchase?.TrialCommodity?.[0]} />
                <PurchasePreLine />
              </> :

          <></>}

            <PurchaseBaseCard
            isInit={true}
            isAgree={isAgree}
            info={BillingInfo?.CommodityPurchase?.BaseCommodity?.[0]} />

            <PurchasePreLine />
            <PurchaseProfessionalCard
            isAgree={isAgree}
            isInit={true}
            modalInfo={BillingInfo?.CommodityPurchase?.ProfessionalCommodity}
            info={BillingInfo?.CommodityPurchase?.ProfessionalCommodity?.[0]} />

            <PurchasePreLine />
            <PurchaseEnterpriseCard />
          </div>
        </> :

      <>
          <header className={css.header}>
            <div className={css.headerTitle}>升级您的套餐</div>
            <div className={css.headerContent}>
              <Popover position="br" content={<PackageBalanceCard detail={BillingInfo?.Quota} />}>
                <div className={cls(css.headerContentIcon, css.headerContentMargin)}>
                  <WrapComponent />
                  <span className={css.headerContentText}>套餐余额</span>
                </div>
              </Popover>
            </div>
          </header>
          <div className={css.wrap}>
            <div className={css.wrapHeader}>
              <div
              onClick={() => setIeMealWrap(true)}
              className={cls(css.wrapHeaderBtn, css.wrapHeaderBtnMargin, {
                [css.wrapHeaderBtnActive]: isMealWrap
              })}>

                套餐包
              </div>
              <div
              onClick={() => setIeMealWrap(false)}
              className={cls(css.wrapHeaderBtn, {
                [css.wrapHeaderBtnActive]: !isMealWrap
              })}>

                加量包
              </div>
            </div>
            {isMealWrap ?
          <div className={cls(css.wrapContent, 'smallScrollbar')}>
                <PurchasePreTitle />
                {BillingInfo?.CommodityPurchase?.TrialCommodity?.[0]?.AllowPurchase ?
            <>
                    <PurchaseTryCard isInit={false} info={BillingInfo?.CommodityPurchase?.TrialCommodity?.[0]} />
                    <PurchasePreLine />
                  </> :

            <></>}

                {isBaseRepurchase ?
            <RepurchaseBaseCard
              isInit={false}
              info={BillingInfo?.CommodityPurchase?.BaseCommodity?.[0]}
              currentPurchaseInfo={BillingInfo?.CommodityRunning?.BaseCommodity} /> :


            <PurchaseBaseCard isInit={false} info={BillingInfo?.CommodityPurchase?.BaseCommodity?.[0]} />}

                <PurchasePreLine />
                {isProfessionalRepurchase ?
            <RepurchaseProfessionalCard
              isInit={false}
              modalInfo={BillingInfo?.CommodityPurchase?.ProfessionalCommodity}
              info={professionalInfo}
              currentPurchaseInfo={BillingInfo?.CommodityRunning?.ProfessionalCommodity} /> :


            <PurchaseProfessionalCard
              isInit={false}
              modalInfo={BillingInfo?.CommodityPurchase?.ProfessionalCommodity}
              info={professionalInfo} />}


                <PurchasePreLine />
                <PurchaseEnterpriseCard />
              </div> :

          <div className={css.increaseWrap}>
                <div className={css.increaseWrapContent}>
                  <div className={css.increaseWrapCard} style={{ marginRight: 16 }}>
                    <div className={css.increaseWrapCardTitle}>
                      <span className={css.increaseWrapCardTitleText}>剪映模版</span>
                      <span className={css.increaseWrapCardTitleLogo}>
                        <span className={css.increaseWrapCardTitleLogoComponent}>
                          <StarComponent className={css.increaseWrapCardTitleLogoComponentStar} />
                          <DeepComponent className={css.increaseWrapCardTitleLogoComponentDeep} />
                        </span>
                        <span className={css.increaseWrapCardTitleLogoText}>大数据量场景推荐</span>
                      </span>
                    </div>
                    <div className={css.increaseWrapCardPrice}>
                      <div className={css.increaseWrapCardPriceNumber}>
                        {additionVideoSmall.ModuleAuthorityBase.VideoCapcutTemplate}
                        <span className={css.increaseWrapCardPriceNumberUnit}>次</span>
                      </div>
                      <div className={css.increaseWrapCardPricePay}>
                        ¥{additionVideoSmall.PriceBase}
                        <span className={css.increaseWrapCardPricePayUnit}>/年</span>
                      </div>
                    </div>
                    <Tooltip
                  content="当前套餐不支持购买加量包，请联系您的销售"
                  disabled={additionVideoSmall.AllowPurchase}>

                      <Button
                    className={css.increaseWrapCardBtn}
                    type="primary"
                    style={{ width: 310 }}
                    loading={loadingVideoSmall}
                    disabled={!additionVideoSmall.AllowPurchase || loadingStorageSmall}
                    onClick={async () => {
                      setLoadingVideoSmall(true);
                      const res = await CreatePreorder({
                        CommodityID: additionVideoSmall?.CommodityID
                      });
                      setLoadingVideoSmall(false);
                      const { PreorderNumber } = res;
                      const return_url = `${location.origin}/finance/order`;
                      window.open(
                        `${location.origin}/finance/order/pay/?preOrderNumbers=${PreorderNumber}&return_url=${return_url}`
                      );
                      setBuyVisible(true);
                    }}>

                        立即购买
                      </Button>
                    </Tooltip>
                  </div>
                  <div className={css.increaseWrapCard}>
                    <div className={css.increaseWrapCardTitle}>
                      <span className={css.increaseWrapCardTitleText}>存储空间</span>
                      <span className={css.increaseWrapCardTitleLogo}>
                        <span className={css.increaseWrapCardTitleLogoComponent}>
                          <StarComponent className={css.increaseWrapCardTitleLogoComponentStar} />
                          <DeepComponent className={css.increaseWrapCardTitleLogoComponentDeep} />
                        </span>
                        <span className={css.increaseWrapCardTitleLogoText}>大数据量场景推荐</span>
                      </span>
                    </div>
                    <div className={css.increaseWrapCardPrice}>
                      <div className={css.increaseWrapCardPriceNumber}>
                        {additionStorageSmall.ModuleAuthorityBase.MaterialLibrary}
                        <span className={css.increaseWrapCardPriceNumberUnit}>GB</span>
                      </div>
                      <div className={css.increaseWrapCardPricePay}>
                        ¥{additionStorageSmall.PriceBase}
                        <span className={css.increaseWrapCardPricePayUnit}>/年</span>
                      </div>
                    </div>
                    <Tooltip
                  content="当前套餐不支持购买加量包，请联系您的销售"
                  disabled={additionStorageSmall.AllowPurchase}>

                      <Button
                    className={css.increaseWrapCardBtn}
                    type="primary"
                    style={{ width: 310 }}
                    loading={loadingStorageSmall}
                    disabled={!additionStorageSmall.AllowPurchase || loadingVideoSmall}
                    onClick={async () => {
                      setLoadingStorageSmall(true);
                      const res = await CreatePreorder({
                        CommodityID: additionStorageSmall?.CommodityID
                      });
                      setLoadingStorageSmall(false);
                      const { PreorderNumber } = res;
                      const return_url = `${location.origin}/finance/order`;
                      window.open(
                        `${location.origin}/finance/order/pay/?preOrderNumbers=${PreorderNumber}&return_url=${return_url}`
                      );
                      setBuyVisible(true);
                    }}>

                        立即购买
                      </Button>
                    </Tooltip>
                  </div>
                </div>
                <div className={css.increaseWrapText}>
                  <InfoGreyComponent className={css.increaseWrapTextInfo} />
                  <span className={css.increaseWrapTextNotice}>
                    加量包购买后有效期为 1 年，到期后自动恢复原资源额度；且不影响原套餐的使用时间和使用限制。
                  </span>
                </div>
              </div>}

          </div>
        </>}

      <Modal
        title={
        <div>
            <ModalComponent className={css.modalNotice} />
            <span className={css.modalText}>是否已完成支付？</span>
          </div>}

        footer={
        <div className={css.modalFooter}>
            <Button onClick={() => setBuyVisible(false)}>取消</Button>
            <Button
            type="primary"
            onClick={() => {
              location.reload();
              setBuyVisible(false);
            }}
            className={css.modalTextBtn}>

              支付完成
            </Button>
          </div>}

        onCancel={() => setBuyVisible(false)}
        visible={buyVisible}
        className={css.buyModal}>

        <div className={css.modalContentText}>
          已完成支付请点击“支付完成”，若套餐状态未更新，请等待1分钟后手动刷新页面。
        </div>
      </Modal>
    </main>);

}